prog = ws decl*:d ws "{" ws body:b ws "}" ws { NemoProg(:d, :b)};

decl = ws "var" ws word:v ws ":" ws type:t ws ";" ws { Declaration(:v, :t) };

type = intType | arrayType;

intType = "int" { IntType() };
arrayType = "[" ws type:t ws "]" { ArrayType(:t) };

expr = int | app | upd | unOp | binOp | var;

int = ws number:n { NemoInt(:n) };

var = ws word:w { NemoVar(:w) };

binOp = ws "(" ws expr:l ws binOperators:s ws expr:r ws ")" ws { NemoBinOp(:s, :l, :r) };

unOp = "-" ws expr:e ws { NemoUnOp(:e) };

app = ws "app" ws "(" ws expr:arr ws "," ws expr:ind ws ")" ws { NemoApp(:arr, :ind)};

upd = ws "upd" ws "(" ws expr:arr ws "," ws expr:ind ws "," ws expr:val ws ")" { NemoUpd(:arr, :ind, :val) };

body = seq | print | test | parallel | iterate | assign;

assign = ws word:v ws ":=" ws expr:e ws { NemoAssign(:v, :e) };

test = ws "(" ws expr:cond ws ")" ws "?" ws { NemoTest(:cond) };

print = ws "print" ws "(" ws expr:e ws ")" ws { NemoPrint(:e)};

seq = ws "{" ws body:b1 ws ";" ws body:b2 ws next*:bs "}" ws { buildSeq(:b1, :b2, :bs)};
next = ";" ws body ws;

parallel = ws "{" ws body:b1 ws "|" ws body:b2 ws opt*:br ws "}" ws { buildParallel(:b1, :b2, :br) };
opt = "|" ws body ws;

ifelse = "if" ws "(" ws expr:cond ws ")" ws body:b1 "else" ws body:b2 ws { buildIfElse(:cond, :b1, :b2) };

while  = "while" ws "(" ws expr:cond ws ")" ws body:b ws { buildWhile(:cond, :b) };

iterate = ws "*" ws body:b  ws { NemoIterate(:b) };

number = digit+ $s { s2i($s) };
word = letter+ $s { $s };
digit = '0' - '9';
letter = 'a' - 'z';
ws = (' ' | '\n' | '\r' | '\t' )*;

binOperators = ("==" | "<=" | ">=" | "<" | ">" | "+" | "*" | "/" | "-" | "%") $s { $s };