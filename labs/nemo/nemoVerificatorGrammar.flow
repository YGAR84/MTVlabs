prog = ws progDecl*:d ws "{" ws formula:tf "}" ws body:b ws "{" ws formula:f ws "}" ws { buildAnodNemoProg(:d, :tf, :b, :f)};

progDecl = ws decl:d ws ";" ws { :d };

decl = ws "var" ws word:v ws ":" ws type:t ws { VMDecl(:v, :t) };

formula = true | false | neg | conj | disj | impl | Ex | All | Elem ;

true = ws "true" ws { True() 	};
false = ws "false" ws { False()	};
neg = ws "!" ws formula:f { Negative(:f)};
conj = ws "(" ws formula:f1 ws "&" ws formula:f2 ws ")" ws { Conjunction(:f1, :f2)};
disj = ws "(" ws formula:f1 ws "V" ws formula:f2 ws ")" ws { Disjunction(:f1, :f2)};
impl = ws "(" ws formula:f1 ws "->" ws formula:f2 ws ")" ws { Implication(:f1, :f2)};
Ex = ws "(" ws "E" ws word:name ws formula:f ws ")" ws { Exists(:name, :f)};
All = ws "(" ws "A" ws word:name ws formula:f ws ")" ws { ForAll(:name, :f)};
Elem = ws "(" ws term:t1 ws boolOp:op ws term:t2 ws ")" ws { ElementalFormula(:op, :t1, :t2)};


term =  intTerm | appTerm | updTerm | ariphTerm | varTerm;
oper = intTerm | varTerm;
intTerm = ws number:n ws { Number(:n)};
varTerm = ws word:w ws { Var(:w)};
ariphTerm = ws "(" ws term:t1 ws algOp:op ws term:t2 ws ")" ws { AriphmTerm( :op, :t1, :t2)};
funcTerm = appTerm | updTerm;
appTerm = ws "app" ws "(" ws term:t1 ws "," ws term:t2 ws ")" ws { App(:t1, :t2)};
updTerm = ws "upd" ws "(" ws term:t1 ws "," ws term:t2 ws "," ws term:t3 ws ")" ws { Upd(:t1, :t2, :t3)};


body = seq | print | test | parall | iter | assign | ifElse | while;
seq = ws "{" ws body:b ws seqNext*:bs"}" ws { buildSeq(:b, :bs)};
seqNext = ";" ws body:b ws { :b };
print = ws "print" ws "(" ws expr:e ws ")" ws { NemoPrint(:e)};
test = ws "(" expr:l ws boolOp:s ws expr:r ws ")" ws "?" ws { NemoTest(:s, :l, :r) };
parall = ws "{" ws body:b ws parallNext*:bp"}" ws { buildPar(:b, :bp) };
parallNext = "|" ws body:b { :b };
assign = ws word:v ws ":=" ws expr:e ws { NemoAssign(:v, :e) };
iter = ws "*" ws body:b  ws "{" ws formula:inv ws "}" ws { buildIter(:b, :inv) };
ifElse = ws "if" ws "(" ws expr:l ws boolOp:op ws expr:r ws ")" ws body:b1 ws "else" body:b2 ws { buildIfElse(:op, :l, :r, :b1, :b2)};
while = ws "while" ws "(" ws expr:l ws boolOp:op ws expr:r ws ")" ws body:b ws "{" ws formula:inv ws "}" ws { buildWhile(:op, :l, :r, :b, :inv)};

expr = int | app | upd | unOp | binOp | var;
int = ws number:n { NemoInt(:n) };
var = ws word:w { NemoVar(:w) };
binOp = ws "(" ws expr:l ws algOp:s ws expr:r ws ")" ws { NemoBinOp(:s, :l, :r) };
unOp = "-" ws expr:e ws { NemoUnOp(:e) };
app = ws "app" ws "(" ws expr:arr ws "," ws expr:ind ws ")" ws { NemoApp(:arr, :ind)};
upd = ws "upd" ws "(" ws expr:arr ws "," ws expr:ind ws "," ws expr:val ws ")" { NemoUpd(:arr, :ind, :val) };

type = intType | arrayType;
intType = "int" { VMIntType() };
arrayType = "[" ws type:t ws "]" { VMArrayType(:t) };

number = digit+ $s { s2i($s) };
digit = '0' - '9';
letter = 'a' - 'z';
ws = (' ' | '\n' | '\r' | '\t' )*;
word = letter+ $s { $s };

boolOp = ("==" | "<=" | ">=" | "<" | ">" | "!=") $s { $s };
algOp = ("+" | "*" | "/" | "-" | "%") $s { $s };
