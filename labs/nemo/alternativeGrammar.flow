prog = ws decl*:d ws "{" ws typedFormula:tf "}" ws body:b ws "{" ws formula:f ws "}" { buildAnodNemoProg(:d, :tf, :b, :f)};

decl = ws "var" ws word:v ws ":" ws type:t ws ";" ws { VMDecl(:v, :t) };

formula = true | false | neg | conj | disj | impl | Ex | All | Elem ;
typedFormula = decl*:d ws formula:f { TypedFormula(:d, :f)};

true = ws "true" ws { True() 	};
false = ws "false" ws { False()	};
neg = ws "!" ws formula:f { Negative(:f)};
conj = ws "(" ws formula:f1 ws "&" ws formula:f2 ws ")" ws { Conjuction(:f1, :f2)};
disj = ws "(" ws formula:f1 ws "V" ws formula:f2 ws ")" ws { Disjuction(:f1, :f2)};
impl = ws "(" ws formula:f1 ws "->" ws formula:f2 ws ")" ws { Implication(:f1, :f2)};
Ex = ws "E" ws decl:d ws formula:f ws { Exists(:d, :f)};
All = ws "A" ws decl:d ws formula:f ws { ForAll(:d, :f)};
Elem = ws "(" ws term:t1 ws boolOp:op ws term:t2 ws ")" ws { ElementalFormula(:op, :t1, :t2)};


term = oper | ariphTerm | funcTerm;
oper = intTerm | varTerm;
intTerm = ws number:n ws { Number(:n)};
varTerm = ws word:w ws { Var(:w)};
ariphmTerm = ws "(" ws term:t1 ws alpOp:op ws term:t2 ws ")" ws { AripmTerm( :op, :t1, :t2)};
funcTerm = appTerm | updTerm;
appTerm = ws "app" ws "(" ws term:t1 ws "," ws term:t2 ws ")" ws { App(:t1, :t2)};
updTerm = ws "upd" ws "(" ws term:t1 ws "," ws term:t2 ws "," ws term:t3 ws ")" ws { Upd(:t1, :t2, :t3)};


body = seq | print | test | parall | iter | assign | ifElse | while;

seq = ws "{" ws body:b ws seqNext*:bs "}" ws { buildSeq(:b, :bs)};
seqNext = ";" ws body:b ws { :b };
print = ws "print" ws "(" ws expr:e ws ")" ws { NemoPrint(:e)};
test = ws "(" expr:l ws boolOp:s ws expr:r ws ")" ws "?" ws { NemoTest(:s, :l, :r) };
parall = ws "{" ws body:b ws parallNext*:bp"}" ws { buildPar(:b, :bp) };
parallNext = "|" ws body:b { :b };
iter = ws "*" ws body:b ws "{" ws formula:f ws "}"  { buildIter(:b :f) };
assign = ws word:v ws ":=" ws expr:e ws { NemoAssign(:v, :e) };
ifElse = ws "if" ws "(" ws expr:l ws boolOp:op ws expr:r ws ")" ws body:b1 ws "else" body:b2 ws { buildIfElse(:op, :l, :r, :b1, :b2)};
while = ws "while" ws "(" ws expr:l ws boolOp:op ws expr:r ws ")" ws body:b ws "{" ws formula:f ws "}" ws { buildWhile(:op, :l, :r, :b, :f)};

expr = int | app | upd | unOp | binOp | var;
int = ws number:n { NemoInt(:n) };
var = ws word:w { NemoVar(:w) };
binOp = ws "(" ws expr:l ws algOp:s ws expr:r ws ")" ws { NemoBinOp(:s, :l, :r) };
unOp = "-" ws expr:e ws { NemoUnOp(:e) };
app = ws "app" ws "(" ws expr:arr ws "," ws expr:ind ws ")" ws { NemoApp(:arr, :ind)};
upd = ws "upd" ws "(" ws expr:arr ws "," ws expr:ind ws "," ws expr:val ws ")" { NemoUpd(:arr, :ind, :val) };

type = intType | arrayType;
intType = "int" { VMIntType() };
arrayType = "[" ws type:t ws "]" { VMArrayType(:t) };

number = digit+ $s { s2i($s) };
word = letter+ $s { $s };
digit = '0' - '9';
letter = 'a' - 'z';
ws = (' ' | '\n' | '\r' | '\t' )*;

boolOp = ("==" | "<=" | ">=" | "<" | ">" | "!=") $s { $s };
algOp = ("+" | "*" | "/" | "-" | "%") $s { $s };

______________________________________________________________________________________
prog = ws decl*:d ws "{" ws decl*:df ws formula:ff ws "}" ws body:b ws "{" ws formula:f ws "}" { buildAnodNemoProg(:d, :df, :ff, :b, :f)};

decl = ws "var" ws word:v ws ":" ws type:t ws ";" ws { VMDecl(:v, :t) };

ws = (' ' | '\n' | '\r' | '\t' )*;

formula = ws "true" ws { True() 	} |
		  ws "false" ws { False()	} | 
		  ws "!" ws formula:f { Negative(:f)} | 
		  ws "(" ws formula:f1 ws "&" ws formula:f2 ws ")" ws { Conjuction(:f1, :f2)} | 
		  ws "(" ws formula:f1 ws "V" ws formula:f2 ws ")" ws { Disjuction(:f1, :f2)} | 
		  ws "(" ws formula:f1 ws "->" ws formula:f2 ws ")" ws { Implication(:f1, :f2)} | 
		  ws "E" ws decl:d ws formula:f ws { Exists(:d, :f)} | 
		  ws "A" ws decl:d ws formula:f ws { ForAll(:d, :f)} | 
		  ws "(" ws term:t1 ws ("==" | "<=" | ">=" | "<" | ">" | "!=") $s ws term:t2 ws ")" ws { ElementalFormula($s, :t1, :t2)};

body = ws "{" ws body:b ws { ";" ws body:b1 ws { :b1 } }*:bs "}" ws { buildSeq(:b, :bs)} | 
	   ws "print" ws "(" ws expr:e ws ")" ws { NemoPrint(:e)} | 
	   ws "(" expr:l ws ("==" | "<=" | ">=" | "<" | ">" | "!=") $s ws expr:r ws ")" ws "?" ws { NemoTest($s, :l, :r) } | 
	   ws "{" ws body:b ws { "|" ws body:b1 { :b1 } }*:bp"}" ws { buildPar(:b, :bp) } | 
	   ws "*" ws body:b ws "{" ws formula:f ws "}"  { buildIter(:b :f) } | 
	   ws word:v ws ":=" ws expr:e ws { NemoAssign(:v, :e) } | 
	   ws "if" ws "(" ws expr:l ws ("==" | "<=" | ">=" | "<" | ">" | "!=") $s ws expr:r ws ")" ws body:b1 ws "else" body:b2 ws { buildIfElse($s, :l, :r, :b1, :b2)} | 
	   ws "while" ws "(" ws expr:l ws ("==" | "<=" | ">=" | "<" | ">" | "!=") $s ws expr:r ws ")" ws body:b ws "{" ws formula:f ws "}" ws { buildWhile($a, :l, :r, :b, :f)};





expr = ws number:n { NemoInt(:n) } | 
	   ws "app" ws "(" ws expr:arr ws "," ws expr:ind ws ")" ws { NemoApp(:arr, :ind)} | 
	   ws "upd" ws "(" ws expr:arr ws "," ws expr:ind ws "," ws expr:val ws ")" { NemoUpd(:arr, :ind, :val) } | 
	   ws "-" ws expr:e ws { NemoUnOp(:e) } | 
	   ws "(" ws expr:l ws ("+" | "*" | "/" | "-" | "%") $s ws expr:r ws ")" ws { NemoBinOp($s, :l, :r) } | 
	   ws word:w { NemoVar(:w) };


type = ws "int" { VMIntType() } | 
	   ws "[" ws type:t ws "]" { VMArrayType(:t) };

term = ws number:n ws { Number(:n)} |
	   ws "upd" ws "(" ws term:t1 ws "," ws term:t2 ws "," ws term:t3 ws ")" ws { Upd(:t1, :t2, :t3)} |
	   ws "app" ws "(" ws term:t1 ws "," ws term:t2 ws ")" ws { App(:t1, :t2)} |
	   ws "(" ws term:t1 ws ("+" | "*" | "/" | "-" | "%") $s ws term:t2 ws ")" ws { AripmTerm($s, :t1, :t2)} |
	   ws word:w ws { Var(:w)};

word = {'a' - 'z'}+ $s { $s };
number = {'0' - '9'}+ $s { s2i($s) };

______________________________________________________________________________________

prog = ws decl*:d ws "{" ws typedFormula:tf "}" ws body:b ws "{" ws formula:f ws "}" { buildAnodNemoProg(:d, :tf, :b, :f)};

decl = ws "var" ws word:v ws ":" ws type:t ws ";" ws { VMDecl(:v, :t) };

formula = true | false | neg | conj | disj | impl | Ex | All | Elem ;
typedFormula = decl*:d ws formula:f { TypedFormula(:d, :f)};

true = ws "true" ws { True() 	};
false = ws "false" ws { False()	};
neg = ws "!" ws formula:f { Negative(:f)};
conj = ws "(" ws formula:f1 ws "&" ws formula:f2 ws ")" ws { Conjuction(:f1, :f2)};
disj = ws "(" ws formula:f1 ws "V" ws formula:f2 ws ")" ws { Disjuction(:f1, :f2)};
impl = ws "(" ws formula:f1 ws "->" ws formula:f2 ws ")" ws { Implication(:f1, :f2)};
Ex = ws "E" ws decl:d ws formula:f ws { Exists(:d, :f)};
All = ws "A" ws decl:d ws formula:f ws { ForAll(:d, :f)};
Elem = ws "(" ws term:t1 ws boolOp:op ws term:t2 ws ")" ws { ElementalFormula(:op, :t1, :t2)};


term = oper | ariphTerm | funcTerm;
oper = intTerm | varTerm;
intTerm = ws number:n ws { Number(:n)};
varTerm = ws word:w ws { Var(:w)};
ariphmTerm = ws "(" ws term:t1 ws alpOp:op ws term:t2 ws ")" ws { AripmTerm( :op, :t1, :t2)};
funcTerm = appTerm | updTerm;
appTerm = ws "app" ws "(" ws term:t1 ws "," ws term:t2 ws ")" ws { App(:t1, :t2)};
updTerm = ws "upd" ws "(" ws term:t1 ws "," ws term:t2 ws "," ws term:t3 ws ")" ws { Upd(:t1, :t2, :t3)};



ws = (' ' | '\n' | '\r' | '\t' )*;
word = letter+ $s { $s };


body = seq | print | test | parall | iter | assign | ifElse | while;
seq = ws "{" ws body:b ws seqNext*:bs "}" ws { buildSeq(:b, :bs)};
seqNext = ";" ws body:b ws { :b };
print = ws "print" ws "(" ws expr:e ws ")" ws { NemoPrint(:e)};
test = ws "(" expr:l ws boolOp:s ws expr:r ws ")" ws "?" ws { NemoTest(:s, :l, :r) };
parall = ws "{" ws body:b ws parallNext*:bp ws "}"  { buildPar(:b, :bp) };
parallNext = "|" ws body:b { :b };
iter = ws "*" ws body:b ws "{" ws formula:f ws "}" { buildIter(:b :f) };
assign = ws word:v ws ":=" ws expr:e ws { NemoAssign(:v, :e) };
ifElse = ws "if" ws "(" ws expr:l ws boolOp:op ws expr:r ws ")" ws body:b1 ws "else" body:b2 ws { buildIfElse(:op, :l, :r, :b1, :b2)};
while = ws "while" ws "(" ws expr:l ws boolOp:op ws expr:r ws ")" ws body:b ws "{" ws formula:f ws "}" ws { buildWhile(:op, :l, :r, :b, :f)};




expr = int | app | upd | unOp | binOp | var;
int = ws number:n { NemoInt(:n) };
var = ws word:w { NemoVar(:w) };
binOp = ws "(" ws expr:l ws algOp:s ws expr:r ws ")" ws { NemoBinOp(:s, :l, :r) };
unOp = "-" ws expr:e ws { NemoUnOp(:e) };
app = ws "app" ws "(" ws expr:arr ws "," ws expr:ind ws ")" ws { NemoApp(:arr, :ind)};
upd = ws "upd" ws "(" ws expr:arr ws "," ws expr:ind ws "," ws expr:val ws ")" { NemoUpd(:arr, :ind, :val) };



type = intType | arrayType;
intType = "int" { VMIntType() };
arrayType = "[" ws type:t ws "]" { VMArrayType(:t) };



number = digit+ $s { s2i($s) };

digit = '0' - '9';
letter = 'a' - 'z';


boolOp = ("==" | "<=" | ">=" | "<" | ">" | "!=") $s { $s };
algOp = ("+" | "*" | "/" | "-" | "%") $s { $s };

